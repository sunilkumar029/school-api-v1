const { colors } = useTheme();
  const { user } = useAuth();
  const router = useRouter();
  const [drawerVisible, setDrawerVisible] = useState(false);
  const [activeTab, setActiveTab] = useState<"upcoming" | "past" | "create">(
    "upcoming",
  );
  const [searchQuery, setSearchQuery] = useState("");

  const {
    data: events,
    loading,
    error,
    refetch,
  } = useEvents({
    is_active: true,
    limit: 400,
    omit: "modified_by,branch,academic_year,branches__geo_location,branches__modified_by,branches__created_by,branches__address,branches__center_point,standards__created_by,standards__modified_by,standards__stationary,standards__inventory,standards_sections,standards_created_by,standards__modified_by",
  });

  const getEventStatus = (startDate: string, endDate?: string) => {
    const now = new Date();
    const start = new Date(startDate);
    const end = endDate ? new Date(endDate) : start;

    if (now < start) return "upcoming";
    if (now > end) return "completed";
    return "ongoing";
  };

  const formatEventData = (apiEvents: any[]) => {
    return apiEvents.map((event) => ({
      id: event.id,
      title: event.name || "Untitled Event",
      date: new Date(event.start_date).toISOString().split("T")[0],
      time: new Date(event.start_date).toLocaleTimeString("en-US", {
        hour: "2-digit",
        minute: "2-digit",
      }),
      location: event.location || "TBD",
      category: event.applies_to || "General",
      description: event.description || "No description available",
      status: getEventStatus(event.start_date, event.end_date),
    }));
  };

  const formattedEvents = formatEventData(events);

  const filteredEvents = formattedEvents.filter((event) => {
    const matchesSearch = event.title
      .toLowerCase()
      .includes(searchQuery.toLowerCase());
    const matchesFilter =
      activeTab === "create"
        ? true
        : event.status === (activeTab === "past" ? "completed" : "upcoming");
    return matchesSearch && matchesFilter;
  });

  const handleRSVP = (eventId: string) => {
    // Handle RSVP logic here
    console.log("RSVP for event:", eventId);
  };
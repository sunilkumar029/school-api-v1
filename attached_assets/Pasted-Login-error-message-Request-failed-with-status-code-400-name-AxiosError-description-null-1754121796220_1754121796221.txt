Login error: {"message":"Request failed with status code 400","name":"AxiosError","description":null,"number":null,"fileName":null,"lineNumber":null,"columnNumber":null,"stack":"AxiosError: Request failed with status code 400\n    at settle (https://922dade2-0f22-4158-949d-a42d93a59373-00-6n3ap1bju93r.sisko.replit.dev/node_modules/expo-router/entry.bundle?platform=web&dev=true&hot=false&lazy=true&transform.routerRoot=app:116979:14)\n    at XMLHttpRequest.onloadend (https://922dade2-0f22-4158-949d-a42d93a59373-00-6n3ap1bju93r.sisko.replit.dev/node_modules/expo-router/entry.bundle?platform=web&dev=true&hot=false&lazy=true&transform.routerRoot=app:116829:29)\n    at Axios.request (https://922dade2-0f22-4158-949d-a42d93a59373-00-6n3ap1bju93r.sisko.replit.dev/node_modules/expo-router/entry.bundle?platform=web&dev=true&hot=false&lazy=true&transform.routerRoot=app:115260:43)\n    at async loginUser (https://922dade2-0f22-4158-949d-a42d93a59373-00-6n3ap1bju93r.sisko.replit.dev/node_modules/expo-router/entry.bundle?platform=web&dev=true&hot=false&lazy=true&transform.routerRoot=app:114293:24)\n    at async handleLogin (https://922dade2-0f22-4158-949d-a42d93a59373-00-6n3ap1bju93r.sisko.replit.dev/node_modules/expo-router/entry.bundle?platform=web&dev=true&hot=false&lazy=true&transform.routerRoot=app:113794:31)","config":{"transitional":{"silentJSONParsing":true,"forcedJSONParsing":true,"clarifyTimeoutError":false},"adapter":["xhr","http","fetch"],"transformRequest":["[Function function transformRequest(data, headers) {\n      const contentType = headers.getContentType() || '';\n      const hasJSONContentType = contentType.indexOf('application/json') > -1;\n      const isObjectPayload = _utils.default.isObject(data);\n      if (isObjectPayload && _utils.default.isHTMLForm(data)) {\n        data = new FormData(data);\n      }\n      const isFormData = _utils.default.isFormData(data);\n      if (isFormData) {\n        return hasJSONContentType ? JSON.stringify((0, _formDataToJSON.default)(data)) : data;\n      }\n      if (_utils.default.isArrayBuffer(data) || _utils.default.isBuffer(data) || _utils.default.isStream(data) || _utils.default.isFile(data) || _utils.default.isBlob(data) || _utils.default.isReadableStream(data)) {\n        return data;\n      }\n      if (_utils.default.isArrayBufferView(data)) {\n        return data.buffer;\n      }\n      if (_utils.default.isURLSearchParams(data)) {\n        headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);\n        return data.toString();\n      }\n      let isFileList;\n      if (isObjectPayload) {\n        if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {\n          return (0, _toURLEncodedForm.default)(data, this.formSerializer).toString();\n        }\n        if ((isFileList = _utils.default.isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {\n          const _FormData = this.env && this.env.FormData;\n          return (0, _toFormData.default)(isFileList ? {\n            'files[]': data\n          } : data, _FormData && new _FormData(), this.formSerializer);\n        }\n      }\n      if (isObjectPayload || hasJSONContentType) {\n        headers.setContentType('application/json', false);\n        return stringifySafely(data);\n      }\n      return data;\n    }]"],"transformResponse":["[Function function transformResponse(data) {\n      const transitional = this.transitional || defaults.transitional;\n      const forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n      const JSONRequested = this.responseType === 'json';\n      if (_utils.default.isResponse(data) || _utils.default.isReadableStream(data)) {\n        return data;\n      }\n      if (data && _utils.default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {\n        const silentJSONParsing = transitional && transitional.silentJSONParsing;\n        const strictJSONParsing = !silentJSONParsing && JSONRequested;\n        try {\n          return JSON.parse(data);\n        } catch (e) {\n          if (strictJSONParsing) {\n            if (e.name === 'SyntaxError') {\n              throw _AxiosError.default.from(e, _AxiosError.default.ERR_BAD_RESPONSE, this, null, this.response);\n            }\n            throw e;\n          }\n        }\n      }\n      return data;\n    }]"],"timeout":0,"xsrfCookieName":"XSRF-TOKEN","xsrfHeaderName":"X-XSRF-TOKEN","maxContentLength":-1,"maxBodyLength":-1,"env":{"FormData":"[Function function FormData() { [native code] }]","Blob":"[Function function Blob() { [native code] }]"},"validateStatus":"[Function function validateStatus(status) {\n      return status >= 200 && status < 300;\n    }]","headers":{"Accept":"application/json, text/plain, */*","Content-Type":"application/json"},"method":"post","url":"https://vai.dev.sms.visionariesai.com/api/get-token/","data":"{\"email\":\"murapakanarasingarao@gmail.com\",\"password\":\"Service@Sms!\"}","allowAbsoluteUrls":true},"code":"ERR_BAD_REQUEST","status":400}
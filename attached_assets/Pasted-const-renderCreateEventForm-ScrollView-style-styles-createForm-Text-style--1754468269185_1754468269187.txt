const renderCreateEventForm = () => (
    <ScrollView style={styles.createForm}>
      <Text style={[styles.formTitle, { color: colors.textPrimary }]}>
        Create New Event
      </Text>

      <View style={styles.formGroup}>
        <Text style={[styles.label, { color: colors.textPrimary }]}>
          Event Title
        </Text>
        <TextInput
          style={[
            styles.input,
            {
              backgroundColor: colors.surface,
              borderColor: colors.border,
              color: colors.textPrimary,
            },
          ]}
          placeholder="Enter event title"
          placeholderTextColor={colors.textSecondary}
        />
      </View>

      <View style={styles.formGroup}>
        <Text style={[styles.label, { color: colors.textPrimary }]}>
          Date & Time
        </Text>
        <View style={styles.dateTimeRow}>
          <TextInput
            style={[
              styles.input,
              styles.dateInput,
              {
                backgroundColor: colors.surface,
                borderColor: colors.border,
                color: colors.textPrimary,
              },
            ]}
            placeholder="Select date"
            placeholderTextColor={colors.textSecondary}
          />
          <TextInput
            style={[
              styles.input,
              styles.timeInput,
              {
                backgroundColor: colors.surface,
                borderColor: colors.border,
                color: colors.textPrimary,
              },
            ]}
            placeholder="Select time"
            placeholderTextColor={colors.textSecondary}
          />
        </View>
      </View>

      <View style={styles.formGroup}>
        <Text style={[styles.label, { color: colors.textPrimary }]}>
          Location
        </Text>
        <TextInput
          style={[
            styles.input,
            {
              backgroundColor: colors.surface,
              borderColor: colors.border,
              color: colors.textPrimary,
            },
          ]}
          placeholder="Enter location"
          placeholderTextColor={colors.textSecondary}
        />
      </View>

      <View style={styles.formGroup}>
        <Text style={[styles.label, { color: colors.textPrimary }]}>
          Description
        </Text>
        <TextInput
          style={[
            styles.textArea,
            {
              backgroundColor: colors.surface,
              borderColor: colors.border,
              color: colors.textPrimary,
            },
          ]}
          placeholder="Enter event description"
          placeholderTextColor={colors.textSecondary}
          multiline
          numberOfLines={4}
        />
      </View>

      <TouchableOpacity
        style={[styles.createButton, { backgroundColor: colors.primary }]}
      >
        <Text style={styles.createButtonText}>Create Event</Text>
      </TouchableOpacity>
    </ScrollView>
  );

  return (
    <SafeAreaView
      style={[styles.container, { backgroundColor: colors.background }]}
    >
      <TopBar
        title="Events"
        onMenuPress={() => setDrawerVisible(true)}
        onNotificationsPress={() => router.push("/(tabs)/notifications")}
        onSettingsPress={() => router.push("/(tabs)/settings")}
      />

      <SideDrawer
        visible={drawerVisible}
        onClose={() => setDrawerVisible(false)}
      />

      {/* Search Bar */}
      {activeTab !== "create" && (
        <View
          style={[styles.searchContainer, { backgroundColor: colors.surface }]}
        >
          <TextInput
            style={[
              styles.searchInput,
              {
                backgroundColor: colors.background,
                borderColor: colors.border,
                color: colors.textPrimary,
              },
            ]}
            placeholder="Search events..."
            placeholderTextColor={colors.textSecondary}
            value={searchQuery}
            onChangeText={setSearchQuery}
          />
        </View>
      )}

      {/* Tabs */}
      <View
        style={[
          styles.tabContainer,
          { backgroundColor: colors.surface, borderBottomColor: colors.border },
        ]}
      >
        <TouchableOpacity
          style={[
            styles.tab,
            activeTab === "upcoming" && {
              borderBottomColor: colors.primary,
              borderBottomWidth: 2,
            },
          ]}
          onPress={() => setActiveTab("upcoming")}
        >
          <Text
            style={[
              styles.tabText,
              {
                color:
                  activeTab === "upcoming"
                    ? colors.primary
                    : colors.textSecondary,
              },
            ]}
          >
            Upcoming
          </Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={[
            styles.tab,
            activeTab === "past" && {
              borderBottomColor: colors.primary,
              borderBottomWidth: 2,
            },
          ]}
          onPress={() => setActiveTab("past")}
        >
          <Text
            style={[
              styles.tabText,
              {
                color:
                  activeTab === "past" ? colors.primary : colors.textSecondary,
              },
            ]}
          >
            Past
          </Text>
        </TouchableOpacity>
        {user?.is_staff && (
          <TouchableOpacity
            style={[
              styles.tab,
              activeTab === "create" && {
                borderBottomColor: colors.primary,
                borderBottomWidth: 2,
              },
            ]}
            onPress={() => setActiveTab("create")}
          >
            <Text
              style={[
                styles.tabText,
                {
                  color:
                    activeTab === "create"
                      ? colors.primary
                      : colors.textSecondary,
                },
              ]}
            >
              Create Event
            </Text>
          </TouchableOpacity>
        )}
      </View>

      {/* Content */}
      {activeTab === "create" ? (
        renderCreateEventForm()
      ) : (
        <ScrollView
          style={styles.content}
          showsVerticalScrollIndicator={false}
          refreshControl={
            <RefreshControl
              refreshing={loading}
              onRefresh={refetch}
              colors={[colors.primary]}
              tintColor={colors.primary}
            />
          }
        >
          {/* Events List */}
          <View style={styles.eventsList}>
            {loading && (!events || events.length === 0) ? (
              <View style={styles.loadingContainer}>
                <ActivityIndicator size="large" color={colors.primary} />
                <Text
                  style={[styles.loadingText, { color: colors.textSecondary }]}
                >
                  Loading events...
                </Text>
              </View>
            ) : error ? (
              <View style={styles.errorContainer}>
                <Text
                  style={[
                    styles.errorText,
                    { color: colors.error || "#FF6B6B" },
                  ]}
                >
                  Failed to load events. Please check your connection and try again.
                </Text>
                <TouchableOpacity
                  onPress={refetch}
                  style={[
                    styles.retryButton,
                    { backgroundColor: colors.primary },
                  ]}
                >
                  <Text style={styles.retryButtonText}>Retry</Text>
                </TouchableOpacity>
              </View>
            ) : filteredEvents.length === 0 ? (
              <View style={styles.emptyContainer}>
                <Text
                  style={[styles.emptyText, { color: colors.textSecondary }]}
                >
                  {searchQuery ? "No events match your search" : 
                   activeTab === "upcoming" ? "No upcoming events" : "No past events"}
                </Text>
              </View>
            ) : (
              <View style={styles.listContent}>
                {filteredEvents.map((event) => (
                  <View
                    key={event.id}
                    style={[
                      styles.eventCard,
                      {
                        backgroundColor: colors.surface,
                        borderColor: colors.border,
                      },
                    ]}
                  >
                    <View style={styles.eventHeader}>
                      <Text
                        style={[styles.eventTitle, { color: colors.textPrimary }]}
                      >
                        {event.title}
                      </Text>
                      <View style={styles.tags}>
                        {event.tags.map((tag, index) => (
                          <View
                            key={index}
                            style={[
                              styles.tag,
                              { backgroundColor: colors.primary + "20" },
                            ]}
                          >
                            <Text
                              style={[styles.tagText, { color: colors.primary }]}
                            >
                              {tag}
                            </Text>
                          </View>
                        ))}
                      </View>
                    </View>

                    <View style={styles.eventDetails}>
                      <Text
                        style={[styles.eventDate, { color: colors.textPrimary }]}
                      >
                        📅 {event.date}
                      </Text>
                      <Text
                        style={[
                          styles.eventTime,
                          { color: colors.textSecondary },
                        ]}
                      >
                        🕒 {event.time}
                      </Text>
                      <Text
                        style={[
                          styles.eventLocation,
                          { color: colors.textSecondary },
                        ]}
                      >
                        📍 {event.location}
                      </Text>
                      <Text
                        style={[
                          styles.eventAttendees,
                          { color: colors.textSecondary },
                        ]}
                      >
                        👥 {event.attendees} attendees
                      </Text>
                    </View>

                    <Text
                      style={[
                        styles.eventDescription,
                        { color: colors.textSecondary },
                      ]}
                    >
                      {event.description}
                    </Text>

                    {activeTab === "upcoming" && (
                      <TouchableOpacity
                        style={[
                          styles.rsvpButton,
                          {
                            backgroundColor: event.isRSVPed
                              ? colors.surface
                              : colors.primary,
                          },
                          {
                            borderColor: colors.primary,
                            borderWidth: event.isRSVPed ? 1 : 0,
                          },
                        ]}
                        onPress={() => handleRSVP(event.id)}
                      >
                        <Text
                          style={[
                            styles.rsvpButtonText,
                            { color: event.isRSVPed ? colors.primary : "#FFFFFF" },
                          ]}
                        >
                          {event.isRSVPed ? "RSVP'd ✓" : "RSVP"}
                        </Text>
                      </TouchableOpacity>
                    )}
                  </View>
                ))}
              </View>
            )}
          </View>
        </ScrollView>
      )}
    </SafeAreaView>